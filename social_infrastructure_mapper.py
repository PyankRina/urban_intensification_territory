import geopandas as gpd
import pandas as pd


def process_and_buffer(gdf):
    """
    –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Å–ª–æ—è —É—á—Ä–µ–∂–¥–µ–Ω–∏–π: –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –∫–æ–ª–æ–Ω–æ–∫, –ø–µ—Ä–µ–≤–æ–¥ –°–ö –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –±—É—Ñ–µ—Ä–æ–≤.
    """
    gdf = gdf.rename(columns={
        'carried_capacity_without': 'free_places',
        'carried_capacity_within': 'employed_places'
    }).to_crs(32637)

    required = ['id_service', 'free_places', 'employed_places', 'buffer_zone']
    for col in required:
        if col not in gdf.columns:
            raise ValueError(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π —Å—Ç–æ–ª–±–µ—Ü: {col}")

    gdf['geometry'] = gdf.buffer(gdf['buffer_zone'] * 1.2)
    return gdf[['id_service', 'free_places', 'employed_places', 'geometry']].to_crs(32637)


def intersect_and_aggregate(buffer_gdf, zones_gdf, label):
    """
    –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —É—á—Ä–µ–∂–¥–µ–Ω–∏—è, –±—É—Ñ–µ—Ä –∫–æ—Ç–æ—Ä—ã—Ö –ø–µ—Ä–µ—Å–µ–∫–∞–µ—Ç—Å—è —Å –∂–∏–ª—ã–º–∏ –∑–æ–Ω–∞–º–∏,
    –∏ –≤—ã–±–∏—Ä–∞–µ—Ç —É—á—Ä–µ–∂–¥–µ–Ω–∏–µ —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –ø–ª–æ—â–∞–¥—å—é –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–π –∑–æ–Ω—ã.
    """
    buffer_gdf = buffer_gdf.to_crs(3857)
    zones_gdf = zones_gdf.to_crs(3857)

    intersected = gpd.overlay(buffer_gdf, zones_gdf, how='intersection')
    intersected['intersection_area'] = intersected.area

    intersected['centroid'] = intersected.centroid
    joined = gpd.sjoin(intersected.set_geometry('centroid'), zones_gdf, predicate='within')

    idx_max_area = joined.groupby('index_right')['intersection_area'].idxmax()
    selected = joined.loc[idx_max_area]

    result = zones_gdf.reset_index().merge(
        selected[['index_right', 'free_places', 'employed_places', 'id_service']],
        left_on='index', right_on='index_right', how='left'
    ).drop(columns=['index_right'])

    result.rename(columns={
        'free_places': f'{label}_free_places',
        'employed_places': f'{label}_employed_places',
        'id_service': f'{label}_id_service'
    }, inplace=True)

    return result[
        [f'{label}_free_places', f'{label}_employed_places', f'{label}_id_service']
    ]


def process_services(zones, kindergarten, school, polyclinic):
    """
    –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏: –±—É—Ñ–µ—Ä–∏–∑–∞—Ü–∏—è, –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ –∏ –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ —É—á—Ä–µ–∂–¥–µ–Ω–∏–π.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç GeoDataFrame —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –ø–æ —Å–≤–æ–±–æ–¥–Ω—ã–º/–∑–∞–Ω—è—Ç—ã–º –º–µ—Å—Ç–∞–º –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –∂–∏–ª—ã—Ö –∑–æ–Ω.
    """
    zones_out = zones.copy()

    layers = {
        'kindergarten': kindergarten,
        'school': school,
        'polyclinic': polyclinic
    }

    for label, gdf in layers.items():
        print(f"üîπ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ª–æ—è: {label}")
        buffered = process_and_buffer(gdf)
        agg = intersect_and_aggregate(buffered, zones, label)

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–ª–æ–Ω–æ–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        for col in [f'{label}_free_places', f'{label}_employed_places', f'{label}_id_service']:
            zones_out[col] = None if 'id_service' in col else pd.NA

        living_mask = zones_out['is_living_zones'] == True

        # –ó–∞–ø–æ–ª–Ω—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –¥–ª—è –∂–∏–ª—ã—Ö –∑–æ–Ω
        zones_out.loc[living_mask, f'{label}_free_places'] = agg.loc[living_mask, f'{label}_free_places']
        zones_out.loc[living_mask, f'{label}_employed_places'] = agg.loc[living_mask, f'{label}_employed_places']
        zones_out.loc[living_mask, f'{label}_id_service'] = agg.loc[living_mask, f'{label}_id_service']

        # –û—Å—Ç–∞–ª—å–Ω—ã–º –ø—Ä–æ—Å—Ç–∞–≤–ª—è–µ–º –Ω—É–ª–∏ –∏ None
        zones_out[f'{label}_free_places'] = zones_out[f'{label}_free_places'].fillna(0)
        zones_out[f'{label}_employed_places'] = zones_out[f'{label}_employed_places'].fillna(0)
        zones_out[f'{label}_id_service'] = zones_out[f'{label}_id_service'].replace('', None)

    living_zones = zones_out[zones_out["is_living_zones"] == True].copy()
    return living_zones
