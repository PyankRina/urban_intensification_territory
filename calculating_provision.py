import os
import geopandas as gpd
import pandas as pd
from objectnat import get_service_provision, clip_provision

def process_services(matrix, combined_service, balanced_buildings, output_path):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ–±–µ—Å–ø–µ—á–µ–Ω–Ω–æ—Å—Ç–∏ –ø–æ —Ä–∞–∑–Ω—ã–º —Ç–∏–ø–∞–º —Å–µ—Ä–≤–∏—Å–æ–≤, 
    —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –ø–æ–∫—Ä—ã—Ç–∏–µ, –¥–µ–ª–∞–µ—Ç clip –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã.

    :param matrix: pandas.DataFrame ‚Äî –º–∞—Ç—Ä–∏—Ü–∞ —Å–æ—Å–µ–¥—Å—Ç–≤–∞
    :param combined_service: GeoDataFrame ‚Äî –æ–±—ä–µ–¥–∏–Ω—ë–Ω–Ω—ã–π —Å–ª–æ–π —Å —Å–µ—Ä–≤–∏—Å–∞–º–∏
    :param buildings: GeoDataFrame ‚Äî –∑–¥–∞–Ω–∏—è —Å –Ω–∞—Å–µ–ª–µ–Ω–∏–µ–º
    :param output_path: str ‚Äî –ø—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏, –∫—É–¥–∞ –±—É–¥—É—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤—ã—Ö–æ–¥–Ω—ã–µ —Ñ–∞–π–ª—ã
    :return: –∫–æ—Ä—Ç–µ–∂ GeoDataFrame: (school, kindergarten, polyclinic)
    """

    # --- –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∑–¥–∞–Ω–∏–π ---
    adjacency_matrix = matrix
    cleaned_buildings = balanced_buildings.copy()
    combined_crs = combined_service.crs
    projected_crs = "EPSG:32637"  # UTM –∑–æ–Ω–∞ 37N (–¥–ª—è –Ø—Ä–æ—Å–ª–∞–≤–ª—è)

    adjacency_matrix.index = adjacency_matrix.index.astype(int)
    adjacency_matrix.columns = adjacency_matrix.columns.astype(int)
    cleaned_buildings.index = cleaned_buildings.index.astype(int)
    cleaned_buildings["demand"] = cleaned_buildings["population"]
    cleaned_buildings = cleaned_buildings.dropna(subset=["demand"]).copy()
    cleaned_buildings = cleaned_buildings.assign(building_index=range(len(cleaned_buildings)))

    os.makedirs(output_path, exist_ok=True)

    # --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ –∫–∞–∂–¥–æ–º—É —Ç–∏–ø—É —Å–µ—Ä–≤–∏—Å–∞ ---
    for service_type in combined_service["type"].unique():
        print(f"\nüîß –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–∏–ø–∞: {service_type}")

        services = combined_service[combined_service["type"] == service_type].copy()
        services = services.dropna(subset=["buffer_zone"])

        if services.empty:
            print(f"‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ: –Ω–µ—Ç –≤–∞–ª–∏–¥–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤ —Ç–∏–ø–∞ {service_type}")
            continue

        services = services.to_crs(projected_crs)
        services["adjusted_buffer"] = services["buffer_zone"] * 1.2
        services["geometry"] = services.geometry.buffer(services["adjusted_buffer"])
        services = services.to_crs(combined_crs)

        if "non_living_area" in services.columns:
            services["capacity"] = services["non_living_area"]
        services["demand"] = services["capacity"]

        buffer_threshold = int(services["adjusted_buffer"].mean()) // 50
        print(f"üìè Threshold: {buffer_threshold}")

        build_prov, services_prov, links_prov = get_service_provision(
            buildings=cleaned_buildings,
            services=services,
            adjacency_matrix=adjacency_matrix,
            threshold=buffer_threshold
        )

        print(f"üè• –°–µ—Ä–≤–∏—Å–æ–≤ –¥–æ clip: {len(services_prov)}")

        to_clip_gdf = build_prov.copy().to_crs(projected_crs)
        to_clip_gdf["geometry"] = to_clip_gdf.geometry.buffer(int(services["adjusted_buffer"].mean()))
        to_clip_gdf = to_clip_gdf.to_crs(combined_crs)

        build_prov_clipped, services_prov_clipped, links_prov_clipped = clip_provision(
            build_prov, services_prov, links_prov, to_clip_gdf
        )

        print(f"‚úÇÔ∏è –°–µ—Ä–≤–∏—Å–æ–≤ –ø–æ—Å–ª–µ clip: {len(services_prov_clipped)}")

        services_file = os.path.join(output_path, f"{service_type}_services_prov_CLIPPED.geojson")
        services_prov_clipped.to_file(services_file, driver="GeoJSON")
        print(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {services_file}")

        clipped_proj = services_prov_clipped.to_crs(projected_crs)
        centroids = clipped_proj.copy()
        centroids["geometry"] = centroids.geometry.centroid
        centroids = centroids.to_crs(combined_crs)

        centroid_file = os.path.join(output_path, f"{service_type}_services_centroids_CLIPPED.geojson")
        centroids.to_file(centroid_file, driver="GeoJSON")
        print(f"üìç –¶–µ–Ω—Ç—Ä–æ–∏–¥—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {centroid_file}")

    # --- –ó–∞–≥—Ä—É–∑–∫–∞ —Ü–µ–Ω—Ç—Ä–æ–∏–¥–æ–≤ –¥–ª—è –∫–ª—é—á–µ–≤—ã—Ö —Ç–∏–ø–æ–≤ ---
    service_types = ["school", "kindergarten", "polyclinic"]
    centroid_vars = {}

    for service_type in service_types:
        centroid_file = os.path.join(output_path, f"{service_type}_services_centroids_CLIPPED.geojson")

        if os.path.exists(centroid_file):
            gdf = gpd.read_file(centroid_file)
            centroid_vars[service_type] = gdf
            print(f"üì• –ó–∞–≥—Ä—É–∂–µ–Ω–æ: {service_type} ‚Äî {len(gdf)} –æ–±—ä–µ–∫—Ç–æ–≤")
        else:
            print(f"‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω —Ñ–∞–π–ª –¥–ª—è: {service_type}")

    return (
        centroid_vars.get("school"),
        centroid_vars.get("kindergarten"),
        centroid_vars.get("polyclinic")
    )
